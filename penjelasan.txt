Berikut adalah penjelasan setiap bagian dari kode OpenGL dalam program yang telah dibuat

### Header dan Library
```cpp
#include "glad/glad.h"
#include <GLFW/glfw3.h>
#include <iostream>
#include <cmath> // Include cmath untuk M_PI
```
- **`#include "glad/glad.h"`**: Menyertakan GLAD, yaitu library untuk membantu memuat fungsi OpenGL secara dinamis.
- **`#include <GLFW/glfw3.h>`**: Menyertakan GLFW, library yang digunakan untuk membuat jendela dan menangani input.
- **`#include <iostream>`**: Menyertakan library standar untuk input/output.
- **`#include <cmath>`**: Menyertakan library untuk fungsi matematika, terutama untuk menggunakan `cos` dan `sin`.

### Fungsi Callback dan Input
```cpp
void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);
```
- **`framebuffer_size_callback`**: Ini adalah fungsi yang akan dipanggil ketika ukuran jendela berubah. Ini berguna untuk mengatur viewport OpenGL.
- **`processInput`**: Fungsi ini untuk memproses input dari keyboard, seperti pergerakan horizontal.

### Pengaturan Global
```cpp
const unsigned int SCR_WIDTH = 800;   // Lebar jendela
const unsigned int SCR_HEIGHT = 600;  // Tinggi jendela
float offsetX = 0.0f;  // Offset horizontal untuk translasi
float angle = 0.0f;    // Sudut rotasi
```
- Variabel ini digunakan untuk mengonfigurasi ukuran jendela serta menyimpan offset horizontal dan sudut rotasi dari objek yang akan digambar.

### Shader Program
#### Vertex Shader
```cpp
const char* vertexShaderSource = "#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "layout (location = 1) in vec3 aColor;\n"
    "out vec3 ourColor;\n"
    "uniform float xOffset;\n"
    "uniform float rotation;\n"
    "void main()\n"
    "{\n"
    "   float cosTheta = cos(rotation);\n"
    "   float sinTheta = sin(rotation);\n"
    "   mat4 rotationMatrix = mat4(\n"
    "       cosTheta, -sinTheta, 0.0, 0.0,\n"
    "       sinTheta,  cosTheta, 0.0, 0.0,\n"
    "       0.0,       0.0,      1.0, 0.0,\n"
    "       0.0,       0.0,      0.0, 1.0\n"
    "   );\n"
    "   gl_Position = rotationMatrix * vec4(aPos.x + xOffset, aPos.y, aPos.z, 1.0);\n"
    "   ourColor = aColor;\n"
    "}\0";
```
- **Versi Shader**: Menentukan versi GLSL yang digunakan (3.3 core).
- **`in vec3 aPos`**: Mengambil posisi vertex dari buffer vertex.
- **`in vec3 aColor`**: Mengambil warna vertex dari buffer vertex.
- **`out vec3 ourColor`**: Mengeluarkan warna untuk dibawa ke fragment shader.
- **`uniform float xOffset`**: Variabel uniform untuk menggeser objek secara horizontal.
- **`uniform float rotation`**: Variabel uniform untuk rotasi objek.
- **`mat4 rotationMatrix`**: Matriks rotasi yang digunakan untuk memutar objek berdasarkan sudut yang diberikan. 
- **`gl_Position`**: Menghitung posisi akhir dari vertex yang akan digambar, yang telah diputar dan digeser.

#### Fragment Shader
```cpp
const char* fragmentShaderSource = "#version 330 core\n"
    "in vec3 ourColor;\n"
    "out vec4 FragColor;\n"
    "void main()\n"
    "{\n"
    "   FragColor = vec4(ourColor, 1.0f);\n"
    "}\n\0";
```
- **`in vec3 ourColor`**: Menerima warna dari vertex shader.
- **`out vec4 FragColor`**: Mengatur warna keluaran untuk fragmen yang akan digambar.
- **`FragColor`** memberi hasil warna dari objek yang digambar (dalam format RGBA).

### Fungsi `main`
Diawali dengan inisialisasi GLFW dan pembuatan jendela:
```cpp
int main() {
    glfwInit(); // Inisialisasi GLFW
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (window == NULL) {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
```
- **Inisialisasi GLFW**: Memulai GLFW dan mengonfigurasi agar menggunakan OpenGL versi 3.3 core.
- **Pembuatan Jendela**: Membuat jendela dengan ukuran yang ditentukan. Jika gagal, program akan mencetak pesan kesalahan dan mengakhiri proses.

### Memuat Fungsi OpenGL
```cpp
if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
    std::cout << "Failed to initialize GLAD" << std::endl;
    return -1;
}
```
- **Memuat GLAD**: Memuat semua fungsi OpenGL menggunakan GLAD. Jika gagal, program akan mengeluarkan pesan kesalahan.

### Kompilasi dan Pengikatan Shader
```cpp
// Bangun dan kompilasi program shader
unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
glCompileShader(vertexShader);

// Menangani kesalahan kompilasi
int success;
char infoLog[512];
glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
if (!success) {
    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
}
```
- **Kompilasi Shader Vertex**: Membuat, mengisi, dan mengompilasi shader vertex. Selanjutnya, mengecek apakah kompilasi berhasil, jika tidak, cetak pesan kesalahan.

### Persiapan Data Vertex
```cpp
float vertices[] = {
    // Positions          // Colors
    -0.5f, -0.5f, 0.0f,   1.0f, 0.0f, 0.0f,  // Bottom-left
     0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,  // Bottom-right
     0.5f,  0.5f, 0.0f,   0.0f, 0.0f, 1.0f,  // Top-right
    -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 1.0f   // Top-left
};
unsigned int indices[] = {
    0, 1, 2,  // Segitiga pertama
    2, 3, 0   // Segitiga kedua
};
```
- **Mendefinisikan Data Vertex**: Menyimpan posisi dan warna untuk setiap vertex dari persegi. Setiap vertex memiliki koordinat 3D dan warna RGB.

### Menghasilkan Buffer dan Array Vertex
```cpp
unsigned int VBO, VAO, EBO;
glGenVertexArrays(1, &VAO);
glGenBuffers(1, &VBO);
glGenBuffers(1, &EBO);

glBindVertexArray(VAO);

glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
```
- **Menghasilkan Buffer**: Membuat Vertex Array Object (VAO) dan Vertex Buffer Object (VBO) serta Element Buffer Object (EBO) untuk menyimpan data vertex dan indeks.

### Mengatur Atribut Vertex
```cpp
// Atribut posisi
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);

// Atribut warna
glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
glEnableVertexAttribArray(1);
```
- **Mengkonfigurasi Atribut**: Mengaitkan posisi dan warna ke dalam VAO. Atribut diindeks untuk mengidentifikasi posisi dan warna dalam data vertex.

### Render Loop
```cpp
while (!glfwWindowShouldClose(window)) {
    processInput(window);

    // Tambah sudut untuk rotasi
    angle += 0.01f;  // Meningkatkan sudut untuk rotasi terus-menerus
    if (angle > 2 * M_PI) {
        angle -= 2 * M_PI;  // Menjaga sudut dalam rentang 0 hingga 2Ï€
    }

    // Render
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // Menggambar persegi
    glUseProgram(shaderProgram);
    
    // Mengatur uniform
    int vertexOffsetLocation = glGetUniformLocation(shaderProgram, "xOffset");
    glUniform1f(vertexOffsetLocation, offsetX);
    
    int rotationLocation = glGetUniformLocation(shaderProgram, "rotation");
    glUniform1f(rotationLocation, angle);  // Mengatur uniform untuk rotasi

    glBindVertexArray(VAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

    glfwSwapBuffers(window);
    glfwPollEvents();
}
```
- **Loop Render**: Selama jendela tidak ditutup, program akan memproses input, memperbarui sudut untuk rotasi, dan menggambar persegi ke layar.
- **Clear Screen**: Menetapkan warna latar belakang dan membersihkan buffer warna.
- **Menggambar Persegi**: Menggunakan data vertex dan shader yang telah dikompilasi untuk menggambar persegi. Menetapkan nilai uniform untuk `xOffset` dan `rotation`.

### Fungsi Input
```cpp
void processInput(GLFWwindow* window) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        offsetX += 0.01f;
    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
        offsetX -= 0.01f;
}
```
- **Proses Input**: Menggunakan GLFW untuk memeriksa apakah tombol ditekan. Jika tombol `ESC` ditekan, jendela akan ditutup. Tombol panah kanan dan kiri mengubah `offsetX` untuk memindahkan persegi ke kanan atau kiri.

### Callback untuk Ukuran Framebuffer
```cpp
void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}
```
- **Callback Ukuran Framebuffer**: Menetapkan viewport OpenGL ketika ukuran jendela berubah, sehingga rendering akan selalu mengikuti ukuran jendela terbaru.

### Pembersihan
```cpp
// Cleanup
glDeleteVertexArrays(1, &VAO);
glDeleteBuffers(1, &VBO);
glDeleteBuffers(1, &EBO);
glDeleteProgram(shaderProgram);

glfwTerminate();
return 0;
```
- **Pembersihan**: Menghapus objek yang telah dibuat (VAO, VBO, EBO, shader program) untuk mencegah kebocoran memori. Melakukan terminasi GLFW.

### Kesimpulan
Program ini menggunakan OpenGL untuk menggambar persegi berwarna yang memutar dan dapat dipindahkan secara horizontal. Dengan memanfaatkan shader, pemrograman banyak menggunakan konsep dasar OpenGL seperti rendering dan pemrosesan bentuk visual. Jika ada yang ingin ditanyakan lebih lanjut, jangan ragu untuk bertanya!
